{
  "PipeHOC class template": {
    "scope": "javascript",
    "prefix": "ppc",
    "body": [
      "import React, { Component, forwardRef } from 'react';",
      "import PropTypes from 'prop-types';",
      "import hoistNonReactStatics from 'hoist-non-react-statics';",
      "import { piper } from 'ppph';",
      "",
      "/**",
      " * --------------------------------------------",
      " * PipeHOC$1",
      " * --------------------------------------------",
      " * introduce your pipeHOC",
      " */",
      "const PipeHOC$1 = (Comp) => {",
      "  class Pipe$1Wrapper extends Component {",
      "    static displayName = `Pipe$1Wrapper${Comp.displayName || Comp.name || ''}`;",
      "",
      "    static propTypes = {",
      "      forwardRef: PropTypes.oneOfType([",
      "        PropTypes.func,",
      "        // Element is just window.Element, this type for React.createRef()",
      "        PropTypes.shape({ current: PropTypes.instanceOf(Element) }),",
      "      ]),",
      "    };",
      "",
      "    static defaultProps = {",
      "      forwardRef: null,",
      "    }",
      "",
      "    render() {",
      "      const { props } = this;",
      "      const nextProps = {",
      "        ...props,",
      "        ref: props.forwardRef,",
      "      };",
      "      return <Comp {...nextProps} />;",
      "    }",
      "  }",
      "",
      "  // it is not need for ppph, but it better to make your PipeHOC common.",
      "  hoistNonReactStatics(Pipe$1Wrapper, Comp);",
      "  // forward the ref.",
      "  return forwardRef((props, ref) => <Pipe$1Wrapper {...props} forwardRef={ref} />);",
      "};",
      "",
      "/**",
      " * --------------------------------------------",
      " * pipe $2",
      " * --------------------------------------------",
      " * introduce your pipe",
      " */",
      "export default piper({",
      "  who: '$2',                        // name for pipe",
      "  when: (type, props) => props.$2,  // condition to use the pipe",
      "  how: PipeHOC$1,                   // the HOC for this pipe, means how to deal with it",
      "  why: (e) => {                     // a callback will be call when error occur.",
      "    console.error('[PipeHOC$1] error: ');",
      "    console.dir(e);",
      "  },",
      "  // pH: means sort weight, just like pH, the lower pH value, the heighter sort weight;",
      "  // key: pependent key name in JSX, which will be sort by write order;",
      "  ph: [7, '$2'],",
      "});",
    ]
  },
  "PipeHOC function template": {
    "scope": "javascript",
    "prefix": "ppf",
    "body": [
      "import React, { forwardRef } from 'react';",
      "import PropTypes from 'prop-types';",
      "import hoistNonReactStatics from 'hoist-non-react-statics';",
      "import { piper } from 'ppph';",
      "",
      "/**",
      " * --------------------------------------------",
      " * PipeHOC$1",
      " * --------------------------------------------",
      " * introduce your pipe.",
      " */",
      "const PipeHOC$1 = (Comp) => {",
      "  // forward the ref.",
      "  const Pipe$1Wrapper = forwardRef((props, ref) => {",
      "    const nextProps = {",
      "      ...props,",
      "      ref,",
      "    };",
      "    return <Comp {...nextProps} />;",
      "  });",
      "  Pipe$1Wrapper.displayName = `Pipe$1Wrapper${Comp.displayName || Comp.name || ''}`;",
      "",
      "  Pipe$1Wrapper.propTypes = {",
      "  };",
      "",
      "  Pipe$1Wrapper.defaultProps = {",
      "  };",
      "",
      "  // it is not need for ppph, but it better to make your PipeHOC common.",
      "  hoistNonReactStatics(Pipe$1Wrapper, Comp);",
      "  return Pipe$1Wrapper;",
      "};",
      "",
      "/**",
      " * --------------------------------------------",
      " * pipe $2",
      " * --------------------------------------------",
      " * introduce your pipe",
      " */",
      "export default piper({",
      "  who: '$2',                        // name for pipe",
      "  when: (type, props) => props.$2,  // condition to use the pipe",
      "  how: PipeHOC$1,                   // the HOC for this pipe, means how to deal with it",
      "  why: (e) => {                     // a callback will be call when error occur.",
      "    console.error('[PipeHOC$1] error: ');",
      "    console.dir(e);",
      "  },",
      "  // pH: means sort weight, just like pH, the lower pH value, the heighter sort weight;",
      "  // key: pependent key name in JSX, which will be sort by write order;",
      "  ph: [7, '$2'],",
      "});",
    ]
  }
}
